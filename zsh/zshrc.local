# system utils

safe_source() { [[ -s $1 ]] && source $1 || return 0 }
safe_source ~/.zshrc.before.local

success() {
    echo -e "\033[32m[✔]\033[0m $@"
}

error() {
    echo -e "\033[31m[✘]\033[0m $@"
}

is_linux() {
    [[ $(uname) == "Linux" ]]
}

is_macos() {
    [[ $(uname) == "Darwin" ]]
}

program_exists() {
    which "$1" &> /dev/null
}
program_exists vim && alias vi=vim
program_exists nvim && alias vim=nvim

cut_last_n_cols() {
    # remove last n columns
    echo "$1" | rev | cut -d'/' -f"$(($2+1))"- | rev
}

alias sd='sudo shutdown now'
program_exists xdg-open && alias open='xdg-open'

alias head="head -n $((${LINES:=`tput lines 2>/dev/null || echo -n 12`} - 3))"
alias tail="tail -n $((${LINES:=`tput lines 2>/dev/null || echo -n 12`} - 3))"

# Create a new directory and enter it
mk() {
    mkdir -p "$@" && cd "$_";
}

cdd() { cd ~/Documents/code/$1 }

add-head() {
    # add text to the beginning or the specified line of a file
    # if the given line number is greater than total number of lines, do nothing
    local file=$1
    local text=$2
    local line=${3:=1}
    if [[ -s $file ]] then;
        sed -i "${line}s/^/${text}\n/" $file
    else
        echo $text >> $file
    fi
}

empty-trash() {
    setopt localoptions rmstarsilent
    is_linux && {
        rm -rf ~/.local/share/Trash/files/*
        rm -rf ~/.local/share/Trash/info/*
    }
}

program_exists notify-send && alias alert='notify-send -u low \
    -i $([ $? -eq 0 ] && echo terminal || echo error)'

program_exists awk && {
    alias awk-last="awk '{print \$NF}'"
    awk-program-home() {
        awk -F"/" '{for(i=1;i<NF-2;i++) printf $i"/"; print $(NF-2)}'
    }
}

program_exists apt && {
    # for debian/ubuntu
    alias pS='sudo apt install'
    alias pSs='apt search'
    alias pSy='sudo apt update'
    alias pSu='sudo apt upgrade'
    alias pSyu='sudo apt update && sudo apt upgrade'
    alias pR='sudo apt purge'
    alias pRa='sudo apt autoremove'
    essential="curl git-gui tmux htop tree clang clang-format"
}

program_exists pacman && {
    # for archlinux
    alias pS='sudo pacman -S --needed'
    alias pSs='pacman -Ss'
    alias pSy='sudo pacman -Sy'
    alias pSu='sudo pacman -Su'
    alias pSyu='sudo pacman -Syu'
    alias pR='sudo pacman -R'
    alias pRa='[[ -n `pacman -Qdt` ]] && sudo pacman -Rns `pacman -Qdtq` || \
        echo "No orphans to remove"'
    essential="wget tk tmux htop tree xclip python-neovim neovim xdg-utils \
        ttf-dejavu ttf-ubuntu-font-family"
}

program_exists brew && {
    # for macOS
    alias pS='brew install'
    alias pSs='brew search'
    alias pSy='brew update'
    alias pSu='brew upgrade'
    alias pSyu='brew update && brew upgrade'
    alias pR='brew uninstall'
    alias pRa='brew cleanup'
    essential="wget"
}

[[ -n $essential ]] && alias install-essential='pS $(echo $essential)'

# tmux commands
alias txls='tmux ls'
alias txrm='tmux kill-session -t'

program_exists tmux && {
    txcl() {
        local args=$(txls | awk 'BEGIN{FS=":"}{print $1}' | xargs echo)
        while IFS=' ' read -A sessions; do
            for session in "${sessions[@]}"; do
                echo "deleting session #$session"
                txrm $session
            done
        done <<< "$args"
    }
}

# pip commands
is_venv() {
    grep -q 'envs\|venv' $(which python)
}

alias pyenv_name='program_exists conda && is_venv && \
    which python | rev | cut -d'/' -f3 | rev'

alias piprm='pip uninstall -y'
alias pipls='pip freeze | grep -v certifi'
alias pipcl='is_venv && pipls | xargs pip uninstall -y'

# pypi
venv_upgrade() {
    is_venv && pip install --upgrade $@ || {
        error "Run this command in a virtual env"
        return 1
    }
}

pycompile() {
    venv_upgrade setuptools wheel || return 1
    [[ -f setup.py ]] && python setup.py sdist bdist_wheel || {
        error "Run this command from the same directory where setup.py is located"
        return 1
    }
}

pyupload() {
    venv_upgrade twine || return 1
    [[ -d dist ]] && twine upload dist/* || {
        error "'dist' folder not found or authentication failed"
        return 1
    }
}

alias pypi='pycompile && pyupload'

# miniconda
program_exists conda && export CONDA_HOME=`cut_last_n_cols $(which python) $(is_venv && echo 4 || echo 2)`

alias u='source activate'
program_exists conda && alias uu='conda deactivate'
alias ucl='find $CONDA_HOME \( -type f -o -type l \) \
    -not -path "$CONDA_HOME/pkgs*" -regex ".*bin/wish[0-9\.]*$" -ls -delete'

program_exists conda && {
    alias uls='conda env list'

    uc() {
        [ "$#" -lt 1 ] && {
            error "missing operand: uc env_name [python_version]"
            return 1
        }
        conda create -n $1 python=${2:=3.6}
        ucl
        u $1
    }

    urm() {
        [ "$#" -lt 1 ] && {
            error "missing operand: urm env_name"
            return 1
        }
        if [[ `pyenv_name` = "$1" ]]; then
            uu
        fi
        conda env remove -n $1
    }
}

# git utils
alias gbcu='git rev-parse --abbrev-ref HEAD'
alias gbrm='git branch -D'

gbrmo() {
    git branch | grep -v $(gbcu) | xargs -r git branch -D
}

gbrm_remote() {
    local branch_to_delete=${1:=$(gbcu)}
    git push origin :$branch_to_delete
}

gitd() {
    local parsed_date=$(date --date=$1 +%F 2>/dev/null)
    [[ -z $parsed_date ]] && { error "Invalid date: $1"; return 1 }
    local desc="$parsed_date $(date +%T)"
    success $desc
    shift
    GIT_AUTHOR_DATE=$desc GIT_COMMITTER_DATE=$desc git $@
}

cdr() {
    # cd to git repo root
    local repo=$(git rev-parse --show-toplevel 2>/dev/null)
    [[ -n $repo ]] && cd $repo || echo "$(pwd) is not a git repo"
}

delete-type() {
    # recursively delete files of the given type
    find . -type f -name "*.$1" -ls -delete
}

delete-folder() {
    find . -type d -name $1 -ls -delete
}

alias rmds='delete-type DS_Store'
alias rmpyc='delete-type pyc && delete-folder __pycache__'

alias rmvim="rm -rf ~/.vim* ~/.config/nvim"

# key bindings
bindkey '^ ' autosuggest-accept

upd() {
    local env_name=`pyenv_name`
    if [[ -n $env_name ]]; then
        echo "deactivating python virtual env: $env_name"
        uu
    fi
    success "updating zsh config"
    safe_source ~/.zshrc.local
    if [[ -n $env_name ]]; then
        echo "restoring python virtual env: $env_name"
        u $env_name
    fi
}

# path deduplication
program_exists awk && {
    LD_LIBRARY_PATH=$(echo -n "$LD_LIBRARY_PATH" | awk -v RS=: -v ORS=: '!a[$1]++' | head -c-1)
    PATH=$(echo -n "$PATH" | awk -v RS=: -v ORS=: '!a[$1]++' | head -c-1)
}
