# vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={{,}} foldmethod=marker:
# @author: Haoming Wang <haoming.exe@gmail.com>

# Path {{

prepend_path() { [[ -d $1 ]] && path=($1 $path) }
append_path() { [[ -d $1 ]] && path+=($1) }

prepend_path $HOME/miniforge3/bin

if is_linux; then
  java_home="$HOME/.jdk"
else
  java_home="$HOME/.jdk/Contents/Home"
fi
if [[ -d "$java_home" ]]; then
  export JAVA_HOME="$java_home"
  prepend_path "$java_home/bin"
fi

prepend_path "$HOME/.golang/bin"
[[ -z "$GOPATH" ]] && export GOPATH=$HOME/go
prepend_path "$GOPATH/bin"

prepend_path "$HOME/.cargo/bin"
prepend_path "$HOME/.node/bin"
prepend_path "$HOME/.vim/bundle/fzf/bin"
prepend_path "/usr/local/opt/openjdk/bin"
prepend_path "/opt/homebrew/bin"

append_path "$HOME/.local/bin"

safe_use_cuda() {
  if [[ -d "$1/lib64" ]]; then
    export CUDA_HOME=$1
    export LD_LIBRARY_PATH=${CUDA_HOME}/lib64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
    if [[ -d "$CUDA_HOME/extras/CUPTI/lib64" ]]; then
      export LD_LIBRARY_PATH=$CUDA_HOME/extras/CUPTI/lib64:$LD_LIBRARY_PATH
    fi
    prepend_path "$CUDA_HOME/bin"
  fi
}
safe_use_cuda "/usr/local/cuda"
safe_use_cuda "/usr/lib/cuda"

# }} // namespace path

# Utils {{

alias -g N='>/dev/null'
alias -g NE='2>/dev/null'
alias -g NN='>/dev/null 2>&1'

program_exists vim && alias vi=vim
program_exists nvim && alias vim=nvim
program_exists nnn && alias n=nnn

program_exists xdg-open && alias open='xdg-open'

navigate() {
  open "$1" NN || sensible-browser "$1" NN
}

cut_cols() {
  # remove last n columns
  echo "$1" | rev | cut -d'/' -f"$(($2+1))"- | rev
}

# Create a new directory and enter it
mk() {
  mkdir -p "$@" && cd "$_";
}

if [[ -n "$WINHOME" ]]; then
  alias cdh='cd $WINHOME'
  alias cdl='cd $WINHOME/Downloads'
  cdd() { local dir="$WINHOME/Documents/code/$1"; [[ -d "$dir" ]] && cd "$dir" }
else
  alias cdl='cd ~/Downloads'
  cdd() { local dir=~/Documents/code/"$1"; [[ -d "$dir" ]] && cd "$dir" }
fi

add-head() {
  # add text to the beginning or the specified line of a file
  # if the given line number is greater than total number of lines, do nothing
  local file=$1
  local text=$2
  local line=${3:=1}
  if [[ -s "$file" ]]; then
    sed -i "${line}s/^/${text}\n/" "$file"
  else
    echo "$text" >> "$file"
  fi
}

_lfcd() {
  local tmp="$(mktemp)"
  lf -last-dir-path="$tmp" "$@"
  [[ -f "$tmp" ]] || return 1
  local dir="$(cat "$tmp")"
  [[ -d "$dir" ]] && cd "$dir"
  rm -f "$tmp"
}

alias alert='notify-send -u low -i $([ $? -eq 0 ] && echo terminal \
  || echo error)'

ext() {
  if [[ -f "$1" ]]; then
    case "$1" in
      *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf "$1" ;;
      *.tar.gz|*.tgz) tar xzvf "$1" ;;
      *.tar.xz|*.txz) tar xJvf "$1" ;;
      *.zip) unzip "$1" ;;
      *.rar) unrar x "$1" ;;
      *.7z) 7z x "$1" ;;
      *) warning "Don't know how to extract $1"
    esac
  else
    error "No such file: $1"
  fi
}

is_linux && {
  alias toclip='xclip -selection clipboard'
  alias getclip='xclip -selection clipboard -o'
  alias sd='sudo shutdown now'
  alias rbt='sudo reboot'
  alias grepp='grep -oP'

  empty-trash() {
    setopt localoptions rmstarsilent
    setopt localoptions nonomatch
    rm -rf ~/.local/share/Trash/files/{,.}*
    rm -rf ~/.local/share/Trash/info/{,.}*
  }
}

is_macos && {
  alias toclip='pbcopy'
  alias getclip='pbpaste'
  alias sd='sudo shutdown -h now'
  alias rbt='sudo shutdown -r now'
  alias grepp='grep -oE'

  alias xc="xcode-select -p | sed 's/\.app.*/\.app/' | xargs open"
  alias xct='xcodebuild test -scheme'

  alias wezterm='/Applications/WezTerm.app/Contents/MacOS/wezterm'

  xcb() {
    local target=${1:=all}
    msg "Building target $target"
    xcodebuild -target "$target"
  }

  fava_loaded() {
    if lcls | grep beancount; then
      return 0
    fi
    return 1
  }

  favald() {
    if fava_loaded; then
      msg "fava service already launched"
      return 0
    fi
    program_exists fava || {
      warning "fava not installed"
      return 1
    }
    if [[ -f ~/Library/LaunchAgents/com.beancount.fava.plist ]]; then
      msg "Starting service com.beancount.fava"
      launchctl load -w ~/Library/LaunchAgents/com.beancount.fava.plist
    else
      warning "service com.beancount.fava.plist doesn't exist."
    fi
  }

  favauld() {
    launchctl unload ~/Library/LaunchAgents/com.beancount.fava.plist
  }
}

genpwd() {
  local len=${1:=20}
  random "a-zA-Z0-9!#$%&()*+,-./:;<=>?@[\]^_{|}~" "$len" | toclip
}

bak() {
  if [[ "$1" == *.bak ]]; then
    local name="$(basename "$1" .bak)"
    if [[ -d "$name" ]] || [[ -f "$name" ]]; then
      warning "$name already exists"
    else
      mv "$1" "$name"
    fi
  else
    mv "$1" "$1.bak"
  fi
}

cpdl() {
  cp "$1" ~/Downloads
}

scpdl() {
  scp "$1:${2:=$(getclip)}" ~/Downloads
}

mvdl() {
  mv "$1" ~/Downloads
}

# }} // namespace utils

# Tools {{

# Vim {{

alias vimrc='vim ~/.vimrc'
alias upvim='vim +PlugClean! +qall && vim +PlugUpdate'

rmvim() {
  setopt localoptions nonomatch
  rm -rf ~/.*vim* ~/.config/nvim ~/.config/coc
}

# }} // namespace vim

# Awk {{

program_exists awk && {
  alias awk-last="awk '{print \$NF}'"

  awk-program-home() {
    awk -F"/" '{for(i=1;i<NF-2;i++) printf $i"/"; print $(NF-2)}'
  }
}

# }}

# Tmux {{

alias tx='tmux attach || tmux'
alias txls='tmux ls | cut -d: -f1'
alias txrm='tmux kill-session -t'

txat() {
  if [[ $# -ge 1 ]]; then
    tmux attach -t $1
    return
  fi
  local session sessions
  sessions=$(tmux ls) && {
    if [[ $(echo "$sessions" | wc -l | xargs) -eq 1 ]]; then
      tmux attach
    else
      echo "$sessions"
      echo -n "enter session name: "
      read session
      tmux attach -t "$session"
    fi
  }
}

txcl() {
  for session in $(txls); do
    echo "deleting session #$session"
    txrm $session
  done
}

# }} // namespace tmux

# GPG {{

alias gpgen='gpg --full-generate-key'

alias gpgpls='gpg --list-keys'

alias gpgprm='gpg --delete-key'
alias gpgrm='gpg --delete-secret-key'

gpgi() {
  if [[ "$1" == *.gpg ]]; then
    gpg --decrypt "$1" | gpg --import
  else
    gpg --import "$1"
  fi
}

gpgsend() {
  local key_id=$(gpgkid "$@")
  gpg --send-keys "$key_id"
}

gpgfd() {
  gpg --search-key "$1"
}

gpgrecv() {
  [[ $# -eq 0 ]] && {
    warning "No key id to retrieve"
    return 1
  }
  gpg --recv-keys "$1"
}

gpgrvk() {
  local key_id=$(gpgkid "$@")
  gpg --output revoke.asc --gen-revoke "$key_id"
}

gpgenc() {
  local ff

  if tty -s; then
    for ff in $@; do
      msg "Encrypting $ff"
      gpg --encrypt --sign --recipient $(gpgkid) "$ff"
    done
  else
    gpg --encrypt --sign --recipient $(gpgkid)
  fi

}

gpgdec() {
  local name ff

  if tty -s; then
    for ff in $@; do
      [[ "$ff" == *.gpg ]] || {
        msg "$ff isn't an encrypted file."
        continue
      }
      name=$(basename $ff .gpg)
      if [[ -f $name ]]; then
        confirm "File $name exists, overwrite?" || {
          msg "Not overwriting $name"
          continue
        }
      fi
      msg "Decrypting $ff"
      gpg --decrypt $ff > "$name"
    done
  else
    gpg --decrypt
  fi
}

gpgcmp() {
  local filename
  local target="/tmp/content"

  if [[ "$1" == *.gpg ]]; then
    filename=$(basename $1 .gpg)
    cat "$1" | gpgdec > "$target"
  else
    filename="$1"
    cat "$1.gpg" | gpgdec > "$target"
  fi

  msg "Comparing $filename and $target"
  diff "$target" "$filename"
  msg "Removing $target"
  rm "$target"
}

gpgpk() {
  local key_id=$(gpgkid "$@")
  gpg --armor --export "$key_id"
}

gpgsk() {
  local key_id=$(gpgkid "$@")
  gpg --export-secret-key "$key_id"
}

gpgcpsk() {
  local key_id=$(gpgkid "$@")
  gpg --armor --export-secret-key "$key_id" | toclip
}

gpgedit() {
  local key_id=$(gpgkid "$@")
  gpg --edit-key "$key_id"
}

gpgmail() {
  gpgls $1 | grep uid | grepp '[a-z0-9\.\_]+@[a-z\.]+' | head -n1
}

# }} // namespace gpg

# Git {{

alias gbrm='git branch -D'
alias gbcu='git rev-parse --abbrev-ref HEAD'
alias groot='git rev-parse --show-toplevel NE'
alias gsmu='git submodule init && git submodule update --remote'
alias gtcl='git tag -l | xargs git tag -d'
alias gtu='gtcl && git fetch --tags'
alias gcfix='git commit -m "fixup!"'
alias grbim='git rebase -i $(git_main_branch)'
alias grhm='git reset --hard origin/$(git_main_branch)'
alias grhc='git reset --hard origin/$(git_current_branch)'
alias gupd='git remote set-head origin -a'
alias gsf='git commit --amend --signoff'

ghcl() {
  local user=${GH_USER:-haomingw}
  git clone "https://github.com/$user/$1.git"
}

ghcls() {
  local user=${GH_USER:-haomingw}
  git clone "git@github.com:$user/$1.git"
}

gtrd() {
  git show -s "$1" --format='%H'
}

gtrm() {
  local tag="$1"
  git tag -d $tag
  git push origin :$tag
}

gte() {
  git tag "$1" "$1"^{} -f -a
}

gbcl() {
  git branch | grep -v $(gbcu) | xargs -r git branch -D
}

gbrmr() {
  local branch=${1:=$(gbcu)}
  [[ $branch != master ]] && [[ $branch != develop ]] && \
    git push origin :$branch
}

gpa() {
  local remotes
  read -A remotes <<< "$(git remote | xargs)"

  for remote in "${remotes[@]}"; do
    git push "$remote" $(gbcu)
  done
}

grcl() {
  local remotes
  read -A remotes <<< "$(git remote | grep -v origin | xargs)"

  for remote in "${remotes[@]}"; do
    msg "Removing git remote: $remote"
    git remote remove "$remote"
  done
}

git_has_remote() {
  git remote -v | grep -i "$1" N
}

graa() {
  local repo=$(git remote get-url origin | cut -d: -f2)
  if [[ "$repo" == /* ]]; then
    warning "Wrong format, ignore remote adding"
    return 0
  fi
  git_has_remote "gitlab" || {
    msg "Adding remote gitlab: git@gitlab.com:$repo"
    git remote add gitlab "git@gitlab.com:$repo"
  }
  git_has_remote "bitbucket" || {
    msg "Adding remote bit: git@bitbucket.org:$repo"
    git remote add bit "git@bitbucket.org:$repo"
  }
}

gitd() {
  local parsed
  is_linux && {
    parsed=$(date --date="$1" +%F NE) || {
      error "Invalid date: $1"
      return 1
    }
  }
  is_macos && {
    parsed=$(date -j -f "%Y-%m-%d" "$1" +%Y-%m-%d NE) || {
      error "Illegal time format, should be: %Y-%m-%d"
      return 1
    }
  }
  local desc="$parsed $(date +%T)"
  success "$desc"
  shift
  GIT_AUTHOR_DATE=$desc GIT_COMMITTER_DATE="$desc" git "$@"
}

gdc() {
  git diff "$1~" "$1"
}

gitg() { local v="$1"; shift; git g$v "$@"; }
gitp() { local v="$1"; shift; git p$v "$@"; }

cdr() {
  # cd to git repo root
  local repo=$(groot)
  [[ -n "$repo" ]] && cd "$repo" || {
    echo "$(pwd) is not a git repo"
    return 1
  }
}

gclip() {
  local url repo

  url="$(getclip)"
  [[ -z "$url" ]] && return 1

  repo="$(parse $url | cut -d. -f1)"

  git clone "$url" && cd "$repo"
}

gitgpg() {
  local key_id=$(gpgkid "$@")
  local email=$(gpgmail "$@")
  msg "Setting git email to $email, with signing key $key_id"
  git config user.signingkey "$key_id"
  git config user.email "$email"
  git config gpg.program gpg
  git config commit.gpgsign true
}

gprc() {
  local url="https://github.com/cli/cli"
  program_exists gh && url=$(gh pr create --draft --fill)
  navigate "$url"
}

# }} // namespace git

# Package manager {{

is_linux && program_exists apt && {
  # for debian/ubuntu
  alias pS='sudo apt install'
  alias pSs='apt search'
  alias pSy='sudo apt update'
  alias pSu='sudo apt upgrade'
  alias pSyu='sudo apt update && sudo apt upgrade'
  alias pR='sudo apt purge'
  alias pRa='sudo apt autoremove'

  essential="curl git-gui tmux clang clang-format clangd build-essential \
    python3-distutils xclip ibus-rime gnupg fonts-symbola"
  optional="htop tree net-tools cmake ctags openssh-server mpv"

  set-cuda() {
    lspci | grep NVIDIA NN || {
      warning "This device does not have NVIDIA GPU."
      return 1
    }
    program_exists nvcc || pS nvidia-cuda-toolkit

    if [[ ! -d cuda ]]; then
      warning "Download cuDNN from https://developer.nvidia.com/rdp/cudnn-archive"
      return 1
    fi

    local cuda_home
    [[ -d /usr/lib/cuda ]] && cuda_home=/usr/lib/cuda
    [[ -d /usr/local/cuda ]] && cuda_home=/usr/local/cuda

    if [[ -n "$cuda_home" ]]; then
      sudo cp -v cuda/include/cudnn*.h $cuda_home/include
      sudo cp -v cuda/lib64/libcudnn* $cuda_home/lib64
      sudo chmod a+r $cuda_home/include/cudnn*.h $cuda_home/lib64/libcudnn*
    fi
  }
}

program_exists pacman && {
  # for archlinux
  alias pS='sudo pacman -S --needed'
  alias pSs='pacman -Ss'
  alias pSy='sudo pacman -Sy'
  alias pSu='sudo pacman -Su'
  alias pSyu='sudo pacman -Syu'
  alias pR='sudo pacman -R'
  alias pRa='[[ -n `pacman -Qdt` ]] && sudo pacman -Rns `pacman -Qdtq` \
    || echo "No orphans to remove"'
  alias pSym='sudo pacman-mirrors --fasttrack && sudo pacman -Syyu'
  alias mkp='makepkg -si'

  essential="base-devel clang wget tk tmux xclip vim gnupg ibus-rime \
    xdg-utils ttf-dejavu ttf-ubuntu-font-family"
  optional="htop tree net-tools cmake ctags openssh mpv"
}

program_exists brew && {
  # for macOS
  alias pS='brew install'
  alias pSs='brew search'
  alias pSy='brew update'
  alias pSu='brew upgrade'
  alias pSyu='brew update && brew upgrade'
  alias pR='brew uninstall'
  alias pRa='brew cleanup'
  alias pRR='brew list --formula | xargs brew uninstall'

  essential="clang-format bash coreutils"
}

alias install-essential='pS $(echo $essential)'
[[ -n "$optional" ]] && alias install-optional='pS $(echo $optional)'

# }} // namespace package_manager

# }} // namespace tools

# Python {{

# Pip {{

alias is_venv='which python | grep -q "envs\|venv"'

alias venv='program_exists conda && is_venv && \
  which python | rev | cut -d'/' -f3 | rev'

alias pipls='pip freeze | grep -v certifi'
alias pipR='pip uninstall -y'

pipS() {
  is_venv || {
    error "Run this command in a virtual env"
    return 1
  }
  if [[ $# -lt 1 ]]; then
    pip install -r requirements.txt
  else
    pip install $@
  fi
}

pipv() {
  pip list | grep "$1"
}

pipcl() {
  local v="$HOME/.pip_packages"
  if is_venv; then
    pipls | cut -d' ' -f1 | xargs pip uninstall -y NE || \
      echo "No packages to remove"
  elif [[ -s $v ]]; then
    pipls | grep -v @ | awk -F== '{print $1}' \
      | xargs -I{} sh -c "grep -q {} $v || pip uninstall -y {}"
  fi
}

# pypi
venv_upgrade() {
  is_venv || {
    error "Run this command in a virtual env"
    return 1
  }
  pip install --upgrade $@
}

pycompile() {
  venv_upgrade setuptools wheel || return 1
  [[ -f setup.py ]] && python setup.py sdist bdist_wheel || {
    error "Run this command from the same directory where setup.py is located"
    return 1
  }
}

pyupload() {
  venv_upgrade twine || return 1
  [[ -d dist ]] && twine upload dist/* || {
    error "'dist' folder not found or authentication failed"
    return 1
  }
}

alias pypi='pycompile && pyupload'

# }} // namespace pip

# Conda {{

program_exists conda && \
  export CONDA_HOME=`cut_cols $(which python) $(is_venv && echo 4 || echo 2)`

u() {
  if [[ $# -lt 1 ]]; then
    [[ -f venv/bin/activate ]] && source venv/bin/activate
    return $?
  fi
  source activate "$1"
}

uu() {
  if which python | grep -q "envs"; then
    conda deactivate
  else
    deactivate
  fi
}

alias uls='conda env list'
alias ucl='find $CONDA_HOME \( -type f -o -type l \) \
  -not -path "$CONDA_HOME/pkgs*" -regex ".*bin/wish[0-9\.]*$" -ls -delete'

program_exists conda && {
  uc() {
    [[ $# -lt 1 ]] && {
      error "missing operand: uc env_name [python_version]"
      return 1
    }
    doit conda create -n $1 python=${2:=3.9}
    ucl
    u $1
  }

  urm() {
    [[ $# -lt 1 ]] && {
      error "missing operand: urm env_name"
      return 1
    }
    if [[ $(venv) = "$1" ]]; then
      uu
    fi
    conda env remove -n "$1"
  }
}

# }} // namespace conda

# Ruby {{

[[ -d ~/.rbenv ]] && {
  alias rb='~/.rbenv/bin/rbenv'
  alias rbinit='eval "$(rb init -)"'
  alias rbrm='rm -rf "$(rb root)"'
}

alias gemls='gem list'

gemcl() {
  for x in $(gem list --no-versions);
    do gem uninstall "$x" -aIx
  done
}

# }}

# Git-hooks {{

set-pre-commit() {
  msg "Installing/updating pre-commit."

  local pv=$(pip --version | getv)

  check_version "$pv" ">=" 20 || {
    echo "Current version: $pv, required version: 20"
    return 1
  }
  pip install -U pre-commit NN

  local repo=$(groot)
  local config=".pre-commit-config.yaml"

  if [[ -n "$repo" ]] && [[ -L ~/"$config" ]]; then
    [[ -f "$repo/$config" ]] || cpif ~/"$config" "$repo"
    [[ -f "$repo/.git/hooks/pre-commit" ]] || pre-commit install
    pre-commit autoupdate
  else
    error "Not in a git repo or pre-commit not configured"
    return 1
  fi
}

rm-pre-commit() {
  local repo=$(groot)

  if [[ -n "$repo" ]]; then
    rm -f "$repo/.git/hooks/pre-commit"
  fi
}

set-post-merge() {
  local repo=$(groot)

  if [[ -n "$repo" ]]; then
    msg "Setting post-merge git hook."
    lnif "$HOME/.githooks/post-merge" "$repo/.git/hooks/post-merge"
  else
    error "Not in a git repo."
    return 1
  fi
}

rm-post-merge() {
  local repo=$(groot)

  if [[ -n "$repo" ]]; then
    rm -f "$repo/.git/hooks/post-merge"
  fi
}

# }} // namespace git-hooks

# }} // namespace python

# Rust {{

alias rmrust='rustup self uninstall'
alias rustls="cargo install --list | grep : | awk -F' ' '{print \$1}'"
alias uprust='rustls | xargs cargo install'
alias rustcl='rustls | xargs cargo uninstall'

# }} // namespace rust

# Golang {{

alias gotest='go test -cover -v'

cdg() {
  local gosrc="$GOPATH/src"
  safe_mkdir "$gosrc" && cd "$gosrc/$1"
}

gocov() {
  go test -coverprofile cover.out && go tool cover -html=cover.out \
    && rm cover.out
}

upgo() {
  [ -f go.mod ] || {
    error "Not a golang module."
    return 1
  }
  local module=$(cat go.mod | head -n1 | cut -d' ' -f2)
  rm go.mod
  go mod init "$module"
  go mod tidy
}

# }} // namespace go

# Files {{

rrmt() {
  # recursively delete files of the given type
  find . -type f -name "*.$1" -ls -delete
}

rrmd() {
  # recursively delete folders
  find . -type d -name $1 -ls -exec rm -rv {} +
}

rmdot() {
  # remove current folder or git root folder
  local target
  if is_in_git_repo; then
    target=$(groot)
  else
    target=$(pwd)
  fi
  confirm "sure you want to delete $target?" && {
    cd "$target/.." && rm -rf $target
  }
}

alias rmds='rrmt DS_Store'
alias rmpyc='rrmt pyc && rrmd __pycache__'
alias rmzsh='rm -rf ~/.zsh ~/.zshrc.*'

transfer() {
  if [ $# -eq 0 ]; then
    echo "No arguments specified.\nUsage:\n transfer <file|directory>\n ... | transfer <file_name>">&2
    return 1
  fi
  local file_name file="$1"
  local records="$HOME/.transfer_history"

  if tty -s; then
    file_name=$(basename "$file")
    if [ ! -e "$file" ]; then
      echo "$file: No such file or directory">&2
      return 1
    fi
    if [ -d "$file" ]; then
      file_name="$file_name.zip"
      cd "$file" && zip -r -q - . | gpgenc | curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name.gpg" | tee -a "$records"
    else
      cat "$file" | gpgenc | curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name.gpg" | tee -a "$records"
    fi
  else
    file_name=$1
    gpgenc | curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name.gpg" | tee -a "$records"
  fi
  tail -1 "$records" | toclip
  echo | tee -a "$records"
}

# }} // namespace files

# Key bindings {{

bindkey ' '   magic-space
bindkey '^ '  autosuggest-accept

## alt == '^['
bindkey '^[z' undo
bindkey '^[Z' redo
bindkey '^[u' up-case-word
bindkey '^[l' down-case-word
bindkey "^['" quote-line
bindkey '^["' quote-region

bindkey -s '^o' '_lfcd\n'

# }} // namespace bindings

# Env {{

upd() {
  local env_name=$(venv)
  if [[ -n "$env_name" ]]; then
    echo "deactivating python virtual env: $env_name"
    uu
  fi
  success "updating zsh config"
  safe_source ~/.zshrc.local
  if [[ -n "$env_name" ]]; then
    echo "restoring python virtual env: $env_name"
    u $env_name
  fi
}

# path deduplication
program_exists awk && {
  LD_LIBRARY_PATH=$(echo -n "$LD_LIBRARY_PATH" \
    | awk -v RS=: -v ORS=: '!a[$1]++' | trim_last_char)
  PATH=$(echo -n "$PATH" | awk -v RS=: -v ORS=: '!a[$1]++' | trim_last_char)
}

program_exists fd && {
  export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
  export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
  export FZF_CTRL_T_COMMAND='fd --type f --type d --hidden --follow --exclude .git'
}

program_exists nvim && export EDITOR=nvim

# }} // namespace env
