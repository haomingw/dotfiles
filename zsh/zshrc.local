# vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={{,}} foldmethod=marker:
# @author: Haoming Wang <haoming.exe@gmail.com>

# Utils {{

alias -g N='>/dev/null'
alias -g NE='2>/dev/null'
alias -g NN='>/dev/null 2>&1'

program_exists vim && alias vi=vim
program_exists nvim && alias vim=nvim
program_exists nnn && alias n=nnn

program_exists xdg-open && alias open='xdg-open'

cut_cols() {
  # remove last n columns
  echo "$1" | rev | cut -d'/' -f"$(($2+1))"- | rev
}

toclip() {
  [[ -f "$1" ]] && program_exists xclip || return 1
  cat "$1" | xclip -selection clipboard
}

# Create a new directory and enter it
mk() {
  mkdir -p "$@" && cd "$_";
}

cdd() { local dir=~/Documents/code/"$1"; [[ -d "$dir" ]] && cd "$dir" }

alias cdl='cd ~/Downloads'

add-head() {
  # add text to the beginning or the specified line of a file
  # if the given line number is greater than total number of lines, do nothing
  local file=$1
  local text=$2
  local line=${3:=1}
  if [[ -s "$file" ]]; then
    sed -i "${line}s/^/${text}\n/" "$file"
  else
    echo "$text" >> "$file"
  fi
}

empty-trash() {
  setopt localoptions rmstarsilent
  setopt localoptions nonomatch
  is_linux && {
    rm -rf ~/.local/share/Trash/files/{,.}*
    rm -rf ~/.local/share/Trash/info/{,.}*
  }
}

lfcd() {
  local tmp="$(mktemp)"
  lf -last-dir-path="$tmp" "$@"
  [[ -f "$tmp" ]] || return 1
  local dir="$(cat "$tmp")"
  [[ -d "$dir" ]] && cd "$dir"
  rm -f "$tmp"
}
alias lff='lfcd'

alias alert='notify-send -u low -i $([ $? -eq 0 ] && echo terminal \
  || echo error)'

# }} // namespace utils

# Tools {{

# Vim {{

alias upvim='vim +PlugClean! +qall && vim +PlugUpdate'

rmvim() {
  setopt localoptions nonomatch
  rm -rf ~/.*vim* ~/.config/nvim ~/.config/coc
}

# }} // namespace vim

# Awk {{

program_exists awk && {
  alias awk-last="awk '{print \$NF}'"

  awk-program-home() {
    awk -F"/" '{for(i=1;i<NF-2;i++) printf $i"/"; print $(NF-2)}'
  }
}

# }}

# Tmux {{

alias txls='tmux ls | cut -d: -f1'
alias txrm='tmux kill-session -t'

program_exists tmux && {
  txat() {
    [[ "$#" -ge 1 ]] && tmux attach -t $1 || tmux attach
  }

  txcl() {
    for session in $(txls); do
      echo "deleting session #$session"
      txrm $session
    done
  }
}

# }} // namespace tmux

# Git {{

alias gbrm='git branch -D'
alias gbcu='git rev-parse --abbrev-ref HEAD'
alias groot='git rev-parse --show-toplevel NE'
alias gsmu='git submodule init && git submodule update --remote'
alias gtcl='git tag -l | xargs git tag -d'
alias gtu='gtcl && git fetch --tags'
alias gcfix='git commit -m "fix"'

gtrm() {
  local tag="$1"
  git tag -d $tag
  git push origin :$tag
}

gbcl() {
  git branch | grep -v $(gbcu) | xargs -r git branch -D
}

gbrmr() {
  local branch=${1:=$(gbcu)}
  [[ $branch != master ]] && [[ $branch != develop ]] && \
    git push origin :$branch
}

gpa() {
  read -A remotes <<< "$(git remote | xargs)"

  for remote in "${remotes[@]}"; do
    git push "$remote" $(gbcu)
  done
}

gitd() {
  local parsed
  is_linux && {
    parsed=$(date --date="$1" +%F NE) || {
      error "Invalid date: $1"
      return 1
    }
  }
  is_macos && {
    parsed=$(date -j -f "%Y-%m-%d" "$1" +%Y-%m-%d NE) || {
      error "Illegal time format, should be: %Y-%m-%d"
      return 1
    }
  }
  local desc="$parsed $(date +%T)"
  success "$desc"
  shift
  GIT_AUTHOR_DATE=$desc GIT_COMMITTER_DATE="$desc" git "$@"
}

gitg() { local v="$1"; shift; git g$v "$@"; }
gitp() { local v="$1"; shift; git p$v "$@"; }

cdr() {
  # cd to git repo root
  local repo=$(groot)
  [[ -n $repo ]] && cd $repo || {
    echo "$(pwd) is not a git repo"
    return 1
  }
}

gclip() {
  local url=$(xclip -selection clipboard -o)
  local repo=$(parse $url | cut -d. -f1)
  git clone "$url" && cd "$repo"
}

gitgpg() {
  git config user.signingkey $(gpgkid)
  git config gpg.program gpg
  git config commit.gpgsign true
}

# }} // namespace git

# GPG {{

alias gpgen='gpg --full-generate-key'

alias gpgpls='gpg --list-keys'
alias gpgls='gpg --list-secret-keys --keyid-format LONG'

alias gpgprm='gpg --delete-key'
alias gpgrm='gpg --delete-secret-key $(gpgkid)'

gpgkid() {
  gpgls | grep sec | awk '{print $2}' | cut -d'/' -f2
}

gpgsend() {
  gpg --keyserver hkps://keys.openpgp.org --send-keys $(gpgkid)
}

gpgrecv() {
  [[ $# -eq 0 ]] && {
    warning "No key id to retrieve"
    return 1
  }
  gpg --keyserver hkps://keys.openpgp.org --recv-keys "$1"
}

gpgenc() {
  for file in $@; do
    msg "Encrypting $file"
    gpg --encrypt --sign --recipient $(gpgkid) "$file"
  done
}

gpgdec() {
  local name

  for file in $@; do
    name=$(basename $file .gpg)
    if [[ -f $name ]]; then
      warning "$name exists"
    else
      msg "Decrypting $file"
      gpg --decrypt $file > "$name"
    fi
  done
}

gpgpub() {
  local key_id=${1:=$(gpgkid)}
  gpg --armor --export $key_id
}

alias gpgpvt='gpg --export-secret-key $(gpgkid)'

# }} // namespace gpg

# Package manager {{

program_exists apt && {
  # for debian/ubuntu
  alias pS='sudo apt install'
  alias pSs='apt search'
  alias pSy='sudo apt update'
  alias pSu='sudo apt upgrade'
  alias pSyu='sudo apt update && sudo apt upgrade'
  alias pR='sudo apt purge'
  alias pRa='sudo apt autoremove'

  essential="curl git-gui tmux clang clang-format build-essential \
    python3-distutils python3-pynvim xclip ibus-rime gnupg fonts-symbola"
  optional="htop tree net-tools cmake ctags openssh-server mpv"

  # HHKB keyboard settings [HHKB mode]
  # sudo vim /usr/share/X11/xkb/symbols/pc
  # modifier_map Control{ Henkan_Mode };
  # modifier_map Mod4   { Muhenkan };
  # sudo rm -rf /var/lib/xkb/*

}

program_exists pacman && {
  # for archlinux
  alias pS='sudo pacman -S --needed'
  alias pSs='pacman -Ss'
  alias pSy='sudo pacman -Sy'
  alias pSu='sudo pacman -Su'
  alias pSyu='sudo pacman -Syu'
  alias pR='sudo pacman -R'
  alias pRa='[[ -n `pacman -Qdt` ]] && sudo pacman -Rns `pacman -Qdtq` \
    || echo "No orphans to remove"'
  alias pSym='sudo pacman-mirrors --fasttrack && sudo pacman -Syyu'
  alias mkp='makepkg -si'

  essential="base-devel clang wget tk tmux xclip vim gnupg ibus-rime \
    python-neovim neovim xdg-utils ttf-dejavu ttf-ubuntu-font-family"
  optional="htop tree net-tools cmake ctags openssh mpv"
}

program_exists brew && {
  # for macOS
  alias pS='brew install'
  alias pSs='brew search'
  alias pSy='brew update'
  alias pSu='brew upgrade'
  alias pSyu='brew update && brew upgrade'
  alias pR='brew uninstall'
  alias pRa='brew cleanup'

  essential="git neovim macvim tmux clang-format"
  optional="go"
}

alias install-essential='pS $(echo $essential)'
[[ -n $optional ]] && alias install-optional='pS $(echo $optional)'

# }} // namespace package_manager

# }} // namespace tools

# Python {{

# Pip {{

alias is_venv='which python | grep -q "envs\|venv"'

alias venv='program_exists conda && is_venv && \
  which python | rev | cut -d'/' -f3 | rev'

alias pipls='pip freeze | grep -v certifi'
alias pipR='pip uninstall -y'

pipS() {
  is_venv || {
    error "Run this command in a virtual env"
    return 1
  }
  pip install $@
}

pipcl() {
  local v="$HOME/.pip_packages"
  if is_venv; then
    pipls | xargs pip uninstall -y NE || echo "No packages to remove"
  elif [[ -s $v ]]; then
    pipls | awk -F== '{print $1}' \
      | xargs -i sh -c "grep -q {} $v || pip uninstall -y {}"
  fi
}

# pypi
venv_upgrade() {
  is_venv || {
    error "Run this command in a virtual env"
    return 1
  }
  pip install --upgrade $@
}

pycompile() {
  venv_upgrade setuptools wheel || return 1
  [[ -f setup.py ]] && python setup.py sdist bdist_wheel || {
    error "Run this command from the same directory where setup.py is located"
    return 1
  }
}

pyupload() {
  venv_upgrade twine || return 1
  [[ -d dist ]] && twine upload dist/* || {
    error "'dist' folder not found or authentication failed"
    return 1
  }
}

alias pypi='pycompile && pyupload'

# }} // namespace pip

# Conda {{

program_exists conda && \
  export CONDA_HOME=`cut_cols $(which python) $(is_venv && echo 4 || echo 2)`

alias u='source activate'
alias uu='conda deactivate'

alias uv='source venv/bin/activate'
alias uuv='deactivate'

alias uls='conda env list'
alias ucl='find $CONDA_HOME \( -type f -o -type l \) \
  -not -path "$CONDA_HOME/pkgs*" -regex ".*bin/wish[0-9\.]*$" -ls -delete'

program_exists conda && {
  uc() {
    [[ "$#" -lt 1 ]] && {
      error "missing operand: uc env_name [python_version]"
      return 1
    }
    conda create -n $1 python=${2:=3.6}
    ucl
    u $1
  }

  urm() {
    [[ "$#" -lt 1 ]] && {
      error "missing operand: urm env_name"
      return 1
    }
    if [[ $(venv) = "$1" ]]; then
      uu
    fi
    conda env remove -n "$1"
  }
}

# }} // namespace conda

# Ruby {{

alias gemls='gem list'

gemcl() {
  for x in $(gem list --no-versions);
    do gem uninstall "$x" -aIx
  done
}

# }}

# Pre-commit {{

set-pre-commit() {
  is_venv && pip install pre-commit || {
    error "Use a virtual env to setup pre-commit"
    return 1
  }
  local repo=$(groot)
  local name
  [[ -n $repo ]] && [[ -d $HOME/.linter ]] && {
    for file in $HOME/.linter/*; do
      name=$(parse $file)
      case $name in
        setup.cfg) ;;
        *) name=".$name" ;;  # hidden files
      esac
      [[ -f $repo/$name ]] || cpif $file "$repo/$name"
    done
    [[ -f "$repo/.git/hooks/pre-commit" ]] || pre-commit install
  } || {
    error "Not in a git repo or pre-commit not configured"
    return 1
  }
}

rm-pre-commit() {
  local repo=$(groot)
  if [[ -n $repo ]]; then
    rm -f "$repo/.git/hooks/pre-commit"
  fi
}

# }} // namespace pre-commit

# }} // namespace python

# Rust {{

alias rmrust='rustup self uninstall'
alias rustls="cargo install --list | grep : | awk -F' ' '{print \$1}'"
alias uprust='rustls | xargs cargo install'
alias rustcl='rustls | xargs cargo uninstall'

# }} // namespace rust

# Golang {{

cdg() {
  local gosrc="$GOPATH/src"
  safe_mkdir "$gosrc" && cd "$gosrc/$1"
}

# }} // namespace go

# Files {{

rrmt() {
  # recursively delete files of the given type
  find . -type f -name "*.$1" -ls -delete
}

rrmd() {
  # recursively delete folders
  find . -type d -name $1 -ls -exec rm -rv {} +
}

rmdot() {
  # remove current folder or git root folder
  local target
  is_git && target=$(groot) || target=$(pwd)
  confirm "sure you want to delete $target?" && {
    cd "$target/.." && rm -rf $target
  }
}

alias rmds='rrmt DS_Store'
alias rmpyc='rrmt pyc && rrmd __pycache__'
alias rmzsh='rm -rf ~/.zsh ~/.zshrc.*'

# }} // namespace files

# Key bindings {{

bindkey ' '   magic-space
bindkey '^ '  autosuggest-accept

## alt == '^['
bindkey '^[z' undo
bindkey '^[Z' redo
bindkey '^[u' up-case-word
bindkey '^[l' down-case-word
bindkey "^['" quote-line
bindkey '^["' quote-region

bindkey -s '^o' 'lfcd\n'

# }} // namespace bindings

# Env {{

upd() {
  local env_name=$(venv)
  if [[ -n $env_name ]]; then
    echo "deactivating python virtual env: $env_name"
    uu
  fi
  success "updating zsh config"
  safe_source ~/.zshrc.local
  if [[ -n $env_name ]]; then
    echo "restoring python virtual env: $env_name"
    u $env_name
  fi
}

# path deduplication
program_exists awk && {
  LD_LIBRARY_PATH=$(echo -n "$LD_LIBRARY_PATH" \
    | awk -v RS=: -v ORS=: '!a[$1]++' | trim_last_char)
  PATH=$(echo -n "$PATH" | awk -v RS=: -v ORS=: '!a[$1]++' | trim_last_char)
}

program_exists rbenv && eval "$(rbenv init -)"

true

# }} // namespace env
