# vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={{,}} foldmethod=marker:
# @author: Haoming Wang <haoming.exe@gmail.com>

# Basic functions {{

# Only use colors if connected to a terminal
if [[ -t 1 ]]; then
  BOLD="$(tput bold 2>/dev/null || echo '\033[1m')"
  UNDERLINE="$(tput smul 2>/dev/null || echo '\033[4m')"
  REV="$(tput rev 2>/dev/null || echo '\033[7m')"
  GREY="$(tput setaf 0 2>/dev/null || echo '\033[90m')"
  RED="$(tput setaf 1 2>/dev/null || echo '\033[31m')"
  GREEN="$(tput setaf 2 2>/dev/null || echo '\033[32m')"
  YELLOW="$(tput setaf 3 2>/dev/null || echo '\033[33m')"
  BLUE="$(tput setaf 4 2>/dev/null || echo '\033[34m')"
  MAGENTA="$(tput setaf 5 2>/dev/null || echo '\033[35m')"
  CYAN="$(tput setaf 6 2>/dev/null || echo '\033[36m')"
  RESET="$(tput sgr0 2>/dev/null || echo '\033[0m')"
else
  BOLD=""
  UNDERLINE=""
  REV=""
  GREY=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  MAGENTA=""
  CYAN=""
  RESET=""
fi

doit() {
  echo "${REV}$*${RESET}"
  "$@"
}

admin() {
  if [[ "$EUID" -ne 0 ]]; then
    sudo "$@"
  else
    "$@"
  fi
}

msg() {
  echo "${BLUE}➜${RESET} $*"
}

warning() {
  echo "${YELLOW}! $*${RESET}"
}

error() {
  echo "${RED}✗ $*${RESET}" >&2
}

success() {
  echo "${GREEN}✓${RESET} $*"
}

is_linux() {
  [[ "$(uname)" == "Linux" ]]
}

is_macos() {
  [[ "$(uname)" == "Darwin" ]]
}

is_arm() {
  [[ "$(uname -m)" == "arm64" ]]
}

is_intel() {
  [[ "$(uname -m)" == "x86_64" ]]
}

is_wsl() {
  uname -a | grep -iq microsoft
}

is_docker() {
  grep -q -E "docker|containerd" /proc/1/cgroup
}

program_exists() {
  command -v "$@" >/dev/null 2>&1
}

safe_mkdir() {
  [[ -d "$1" ]] || mkdir -p "$1"
}

safe_touch() {
  if [[ ! -f "$1" ]]; then
    mkdir -p $(dirname "$1")
    touch "$1"
  fi
}

lnif() {
  if [[ ! -f "$1" ]] && [[ ! -d "$1" ]]; then
    warning "No such file or directory: $1"
  elif [[ ! -d "$(dirname "$2")" ]]; then
    warning "Parent folder not exists: $2"
  else
    ln -svfn "$1" "$2" || doit sudo ln -svfn "$1" "$2"
  fi
}

cpif() {
  if [[ -e "$1" ]]; then
    cp -rv "$1" "$2" || doit sudo cp -rv "$1" "$2"
  else
    warning "File or directory $1 doesn't exist"
  fi
}

parse() {
  local data
  [[ $# -eq 0 ]] && read data || data="$1"
  echo $data | rev | cut -d'/' -f1 | rev
}

confirm() {
  printf "$1 (y/N) "
  read
  case $REPLY in
    [yY][eE][sS]|[yY]) return 0 ;;
    *) return 1 ;;
  esac
}

rename() {
  # e.g. rename txt in
  local ff
  for ff in *.$1; do
    mv $ff $(basename $ff $1)$2
  done
}

program_must_exist() {
  program_exists "$1" || {
    error "You must have '$1' installed to continue."
    return 1
  }
}

args_must_exist() {
  local min_argc="$1"
  shift
  [[ $# -ge $min_argc ]] || {
    error "Required argc: $min_argc, current: $#"
    return 1
  }
}

# }} // namespace basic

# GPG {{

gpgls() {
  gpg --list-secret-keys --keyid-format LONG "$@"
}

gpgkid() {
  gpgls ${1:-} | grep sec | head -n1 | awk '{print $2}' | cut -d'/' -f2
}

gpgenc() {
  local ff

  if tty -s; then
    for ff in $@; do
      msg "Encrypting $ff"
      gpg --encrypt --sign --recipient $(gpgkid) "$ff"
    done
  else
    gpg --encrypt --sign --recipient $(gpgkid)
  fi
}

gpgdec() {
  local name ff

  if tty -s; then
    for ff in $@; do
      [[ "$ff" == *.gpg ]] || {
        msg "$ff isn't an encrypted file."
        continue
      }
      name=$(basename $ff .gpg)
      if [[ -f $name ]]; then
        confirm "File $name exists, overwrite?" || {
          msg "Not overwriting $name"
          continue
        }
      fi
      msg "Decrypting $ff"
      gpg --decrypt $ff > "$name"
    done
  else
    gpg --decrypt
  fi
}

# }} // namespace gpg

# Utils {{

is_ubuntu() {
  program_exists lsb_release || return 1
  lsb_release -i | grep -iq ubuntu
}

macos_has() {
  is_macos || return 1
  ls /Applications | grep -i "$1" >/dev/null
}

apt_repo_exists() {
  is_ubuntu || return 1
  local repo
  for repo in /etc/apt/sources.list.d/*.list; do
    [[ "$repo" == *"$1"* ]] && return 0
  done
  grep -q "$1" /etc/apt/sources.list && return 0
  return 1
}

getv() {
  local data
  read data
  if is_linux; then
    echo "$data" | grep -oP '\d+(\.\d+)+' | head -n1
  else
    echo "$data" | grep -oE '\d+(\.\d+)+' | head -n1
  fi
}

reverse() {
  local args="$@"
  [[ $# -eq 0 ]] && read args
  if program_exists "tac"; then
    echo $args | tr ' ' '\n' | tac | tr '\n' ' ' | xargs
  else
    echo $args | tr ' ' '\n' | tail -r | tr '\n' ' ' | xargs
  fi
}

now() {
  is_linux && date +%s.%N
  is_macos && program_exists gdate && gdate +%s.%N
}

compare_version() {
  if [[ $1 == $2 ]]; then
    return 2
  fi

  local i idx offset=0
  if program_exists setopt; then
    setopt localoptions shwordsplit
    offset=1
  fi

  local IFS=.
  local va=${1%%[^0-9.]*} vb=${2%%[^0-9.]*}
  local a=($va) b=($vb)
  local aa=${1#$va} bb=${2#$vb}

  for ((i=0; i<${#a[@]} || i<${#b[@]}; i++)); do
    idx=$((i + offset))
    if ((10#${a[idx]:-0} < 10#${b[idx]:-0})); then
      return 1
    elif ((10#${a[idx]:-0} > 10#${b[idx]:-0})); then
      return 3
    fi
  done

  if [[ "$aa" < "$bb" ]]; then
    return 1
  elif [[ "$aa" > "$bb" ]]; then
    return 3
  fi
  return 2
}

check_version() {
  # usage: check_version $v '>=' 4
  local op
  compare_version $1 $3
  local ret=$?
  case $ret in
    1) op='<';;
    2) op='=';;
    3) op='>';;
  esac
  [[ $2 == $op ]] && return 0
  [[ $2 == ">=" ]] && [[ $ret -ge 2 ]] && return 0
  [[ $2 == "<=" ]] && [[ $ret -le 2 ]] && return 0
  return 1
}

random() {
  # usage: random [pattern] [len]
  cat /dev/urandom | LC_CTYPE=C tr -dc "$1" | head -c "$2"
}

genf() {
  # usage: genf [filename] [size in MB]
  dd if=/dev/urandom of="$1" bs=1024k count="$2"
}

add_auth_key() {
  args_must_exist 1 "$@" || return 1
  local keyfile="$HOME/.ssh/authorized_keys"
  local user="$1"
  local key name

  safe_touch "$keyfile"

  curl https://github.com/"$1".keys 2>/dev/null | while IFS= read -r key; do
    name=$(echo "$key" | awk '{print $1}')
    msg "Adding $user's github $name key to ssh authorized_keys."
    grep -q "$key" "$keyfile" || echo "$key $user" >> "$keyfile"
  done
}

is_personal() {
  program_exists gpg && [[ $(gpgkid) == "CCFF6597AE72D4FB" ]]
}

is_pro() {
  local domain
  domain=$(gpgls | grep "@" | grep -v gmail | cut -d'@' -f2 | cut -d'.' -f1)
  program_exists gpg && [[ $(gpgkid "$domain") == "F7ECF5AA6AF345C8" ]]
}

make_sound() {
  if is_macos; then
    afplay /System/Library/Sounds/Ping.aiff
  else
    tput bel
  fi
}

# }} // namespace utils

# Awk {{

trim_last_char() {
  local args="$@"
  [[ $# -eq 0 ]] && read args
  echo $args | awk '{print substr($0, 1, length($0)-1)}'
}

# }} // namespace awk
