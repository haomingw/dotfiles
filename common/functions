# vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={{,}} foldmethod=marker:
# @author: Haoming Wang <haoming.exe@gmail.com>

# Basic functions {{

# Only use colors if connected to a terminal
if [[ -t 1 ]]; then
  BOLD="$(tput bold 2>/dev/null || echo '\033[1m')"
  GREY="$(tput setaf 0 2>/dev/null || echo '\033[90m')"
  UNDERLINE="$(tput smul 2>/dev/null || echo '\033[4m')"
  RED="$(tput setaf 1 2>/dev/null || echo '\033[31m')"
  GREEN="$(tput setaf 2 2>/dev/null || echo '\033[32m')"
  YELLOW="$(tput setaf 3 2>/dev/null || echo '\033[33m')"
  BLUE="$(tput setaf 4 2>/dev/null || echo '\033[34m')"
  MAGENTA="$(tput setaf 5 2>/dev/null || echo '\033[35m')"
  CYAN="$(tput setaf 6 2>/dev/null || echo '\033[36m')"
  RESET="$(tput sgr0 2>/dev/null || echo '\033[0m')"
else
  BOLD=""
  GREY=""
  UNDERLINE=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  MAGENTA=""
  CYAN=""
  RESET=""
fi

msg() {
  echo "${BLUE}➜${RESET} $@"
}

warning() {
  echo "${YELLOW}! $@${RESET}"
}

error() {
  echo "${RED}✗ $@${RESET}" >&2
}

success() {
  echo "${GREEN}✓${RESET} $@"
}

is_linux() {
  [[ $(uname) == "Linux" ]]
}

is_macos() {
  [[ $(uname) == "Darwin" ]]
}

program_exists() {
  command -v "$@" >/dev/null 2>&1
}

safe_mkdir() {
  [[ -d "$1" ]] || mkdir -p "$1"
}

lnif() {
  if [[ -e "$1" ]]; then
    ln -svfn "$1" "$2"
  fi
}

cpif() {
  if [[ -e "$1" ]]; then
    cp -rv "$1" "$2"
  fi
}

parse() {
  local data="$1"
  [[ $# -eq 0 ]] && read data
  echo $data | rev | cut -d'/' -f1 | rev
}

confirm() {
  printf "$1 (y/N) "
  read
  case $REPLY in
    [yY][eE][sS]|[yY]) return 0 ;;
    *) return 1 ;;
  esac
}

reverse() {
  local args=$@
  [[ $# -eq 0 ]] && read args
  if program_exists "tac"; then
    echo $args | tr ' ' '\n' | tac | tr '\n' ' ' | xargs
  else
    echo $args | tr ' ' '\n' | tail -r | tr '\n' ' ' | xargs
  fi
}

rename() {
  # e.g. rename txt in
  for file in *.$1; do
    mv $file $(basename $file $1)$2
  done
}

now() {
  is_linux && date +%s.%N
  is_macos && program_exists gdate && gdate +%s.%N
}

# }}

# Advanced functions {{

# Awk {{

trim_last_char() {
  local args=$@
  [[ $# -eq 0 ]] && read args
  echo $args | awk '{print substr($0, 1, length($0)-1)}'
}

# }}

# }}
